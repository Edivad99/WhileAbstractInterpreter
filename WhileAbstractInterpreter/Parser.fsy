%{
open Ast
%}

%token <int> Number
%token <string> Var
%token EOF LPAREN RPAREN LCURLPAREN RCURLPAREN LSQRPAREN RSQRPAREN RAND 
       ASN SEMICOLON SKIP
       IF THEN ELSE WHILE DO
       PLUS MINUS MULT DIV
       TRUE FALSE NOT AND OR
       LT LEQ EQ GEQ GT NEQ

%nonassoc THEN ELSE
%left SEMICOLON
%left OR
%left AND
%left EQ LT GT LEQ GEQ NEQ
%left PLUS MINUS
%left MULT DIV


%start prog
%type <Ast.Stm> prog
%%

prog: seqStatement EOF                                      { $1 }

seqStatement
    : statement                                             { $1 }
    | seqStatement SEMICOLON                                { $1 }
    | seqStatement SEMICOLON seqStatement                   { Seq ($1, $3) }

statement
    : Var ASN arithmExpr                                    { VarDec ($1, $3) }
    | Var ASN RAND                                          { VarDec ($1, Random) }
    | SKIP                                                  { Skip }
    | IF boolExpr THEN statement ELSE statement             { IfThenElse ($2, $4, Some $6) }
    | IF boolExpr THEN statement                            { IfThenElse ($2, $4, None) }
    | WHILE boolExpr DO statement                           { While ($2, $4) }
    | LCURLPAREN seqStatement RCURLPAREN                    { $2 }

arithmExpr
    : Number                                                { Constant ($1) }
    | MINUS arithmExpr                                      { UnOp ("-", $2) }
    | Var                                                   { Variable ($1) }
    | arithmExpr PLUS arithmExpr                            { BinOp ($1, "+", $3) }
    | arithmExpr MINUS arithmExpr                           { BinOp ($1, "-", $3) }
    | arithmExpr MULT arithmExpr                            { BinOp ($1, "*", $3) }
    | arithmExpr DIV arithmExpr                             { BinOp ($1, "/", $3) }
    | LPAREN arithmExpr RPAREN                              { $2 }
    | LSQRPAREN Number SEMICOLON Number RSQRPAREN           { Range ($2, $4) }

boolExpr
    : TRUE                                                  { Boolean (true) }
    | FALSE                                                 { Boolean (false) }
    | NOT boolExpr                                          { UnOp ("!", $2) }
    | boolExpr AND boolExpr                                 { BinOp ($1, "&&", $3) }
    | boolExpr OR boolExpr                                  { BinOp ($1, "||", $3) }
    | arithmExpr LT arithmExpr                              { BinOp ($1, "<", $3) }
    | arithmExpr LEQ arithmExpr                             { BinOp ($1, "<=", $3) }
    | arithmExpr EQ arithmExpr                              { BinOp ($1, "=", $3) }
    | arithmExpr GEQ arithmExpr                             { BinOp ($1, ">=", $3) }
    | arithmExpr GT arithmExpr                              { BinOp ($1, ">", $3) }
    | arithmExpr NEQ arithmExpr                             { BinOp ($1, "!=", $3) }
    | LPAREN boolExpr RPAREN                                { $2 }
